//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SkiingJumps
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<ski_jumpers> ski_jumpers { get; set; }
        public virtual DbSet<ski_jumping_hills> ski_jumping_hills { get; set; }
        public virtual DbSet<ski_jumps> ski_jumps { get; set; }
    
        public virtual int InsertDataResults(string jumperName, string jumperSurname, string jumperCountry, Nullable<double> meters, Nullable<double> points, string hillName, Nullable<int> height, string city, string hillCountry, Nullable<int> jCountryID, Nullable<int> hCountryID, Nullable<int> cityID, Nullable<int> jumperID, Nullable<int> hillID)
        {
            var jumperNameParameter = jumperName != null ?
                new ObjectParameter("JumperName", jumperName) :
                new ObjectParameter("JumperName", typeof(string));
    
            var jumperSurnameParameter = jumperSurname != null ?
                new ObjectParameter("JumperSurname", jumperSurname) :
                new ObjectParameter("JumperSurname", typeof(string));
    
            var jumperCountryParameter = jumperCountry != null ?
                new ObjectParameter("JumperCountry", jumperCountry) :
                new ObjectParameter("JumperCountry", typeof(string));
    
            var metersParameter = meters.HasValue ?
                new ObjectParameter("Meters", meters) :
                new ObjectParameter("Meters", typeof(double));
    
            var pointsParameter = points.HasValue ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(double));
    
            var hillNameParameter = hillName != null ?
                new ObjectParameter("HillName", hillName) :
                new ObjectParameter("HillName", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var hillCountryParameter = hillCountry != null ?
                new ObjectParameter("HillCountry", hillCountry) :
                new ObjectParameter("HillCountry", typeof(string));
    
            var jCountryIDParameter = jCountryID.HasValue ?
                new ObjectParameter("JCountryID", jCountryID) :
                new ObjectParameter("JCountryID", typeof(int));
    
            var hCountryIDParameter = hCountryID.HasValue ?
                new ObjectParameter("HCountryID", hCountryID) :
                new ObjectParameter("HCountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var jumperIDParameter = jumperID.HasValue ?
                new ObjectParameter("JumperID", jumperID) :
                new ObjectParameter("JumperID", typeof(int));
    
            var hillIDParameter = hillID.HasValue ?
                new ObjectParameter("HillID", hillID) :
                new ObjectParameter("HillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDataResults", jumperNameParameter, jumperSurnameParameter, jumperCountryParameter, metersParameter, pointsParameter, hillNameParameter, heightParameter, cityParameter, hillCountryParameter, jCountryIDParameter, hCountryIDParameter, cityIDParameter, jumperIDParameter, hillIDParameter);
        }
    }
}
